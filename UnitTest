# Name: Dicts and Sets Unit Test
# Time: 2/28/2023 @ 7:21 am

# Helper Functions
import operator as op
import traceback
from datetime import datetime

eq_comp = op.__eq__
is_comp = op.is_

def perm_eq(p1, p2):
    if not isinstance(p1, str) or not isinstance(p2, str):
        return False
    def to_dct(perm):
        split_perm = perm[1:len(perm)-1].split(')(')
        dct = {}
        for chunk in split_perm:
            n = len(chunk)
            for i in range(n):
                if i < n - 1:
                    dct[chunk[i]] = chunk[i+1]
                else:
                    dct[chunk[i]] = chunk[0]
        return dct
    return(to_dct(p1) == to_dct(p2))

def elems_comp(a_list, b_list):
    # Return true if every element of a is an element of b and vice versa, False otherwise
    if not isinstance(a_list, list) or not isinstance(b_list, list):
        return False
    for elem in a_list:
        if elem not in b_list:
            return False
    for elem in b_list:
        if elem not in b_list:
            return False
    return True

def order_comp(a_list, b_list):
    for i in range(len(a_list)):
        try:
            if a_list[i] != b_list[i]:
                return False
        except:
            return False
    return True

def eq_not_is(an_obj, another_obj):
    return (an_obj == another_obj) and not(an_obj is another_obj)

def approx_eq(expected, actual):
    if isinstance(expected, (int, float, complex)):
        if not isinstance(actual, (int, float, complex)):
            return False
        return abs(expected - actual) < 0.000001
    return False

def build_arg_str(args, is_poly):
    arg_str = ""
    if is_poly:
        for arg in args:
            if callable(arg):
                arg_str = arg_str + arg.__name__ + " "
            else:
                if isinstance(arg, str):
                    arg_str = arg_str + "'" + arg + "'" + " "
                else:
                    arg_str = arg_str + str(arg) + " "
    else:
        if callable(args):
            arg_str = args.__name__
        else:
            if isinstance(args, str):
                arg_str = "'" + args + "'"
            else:
                arg_str = str(args)
    return arg_str.strip()

class Unit():

    def __init__(self, func, name, cases, is_polyadic, is_mutator, test_type, extra_credit = False):
        # If the function is polyadic, we need to * the input so that it unpacks.
        # If the function is a mutator, we don't ask for its return value.
        # Instead we compare the input after the function is called to the correct mutated value.
        # Six test types are required:
        # 1. Verify equality of value: eq_comp
        # 2. Verify identity: is_comp
        # 3. Verify equality of value and non-identity: eq_not_is
        # 4. Verify that two lists have the same elements, order irrelevant: elems_comp
        # 5. Verify that two lists have same elements in same order: order_comp
        # 6. Verify that two floats are close enough: approx_eq
        self.func = func
        self.name = name
        self.cases = cases
        self.is_polyadic = is_polyadic
        self.is_mutator = is_mutator
        self.test_type = test_type
        self.score = 0
        self.extra_credit = extra_credit

    def add_test(self, new_test):
        self.cases.append(new_test)

class UnitTest():

    def __init__(self, name, units):
        self.name = name
        self.units = units
        self.score = 0
        self.num_tests = 0

    def run_test(self):
        test_file = open("report.txt", "w")
        test_file.write(self.name + "\n")
        now = datetime.now()
        dt_string = now.strftime("Date: %m/%d/%Y, Time: %H:%M:%S")
        test_file.write(dt_string + "\n")
        total_score = 0
        pts_lost_dict = {}
        for unit in self.units:
            pts_lost_dict[unit.name] = 0
            if unit.extra_credit:
                header_str = "\nFunction: \"" + unit.name + "\"" + "(extra credit)\n"
            else:
                header_str = "\nFunction: \"" + unit.name + "\"\n"
            test_file.write(header_str)
            for case in unit.cases:
                if not unit.extra_credit:
                    self.num_tests += 1
                arg = case[0]
                expected_value = case[1]
                arg_str = build_arg_str(arg, unit.is_polyadic)
                test_file.write("Argument(s): " + arg_str + "  ")
                # Now flush the contents of the write buffer so that if a function hangs,
                # the report will show precisely where it happened.
                test_file.flush()
                try:
                    if unit.is_polyadic:
                        actual_value = unit.func(*arg)
                    else:
                        actual_value = unit.func(arg) 
                except Exception as err:
                    # Do not print error if function hasn't been implemented (no arguments defined but passing args error).
					# This avoids giving students a wall of errors when starting project.
                    if "takes 0 positional arguments but" not in str(err):
                        # Print error to console
                        traceback.print_exc()
                    test_file.write("Crash! No points!\n")
                    pts_lost_dict[unit.name] += 1
                else:
                    if not unit.is_mutator:
                        if unit.test_type(expected_value, actual_value):
                            test_file.write("  Return value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect return value! No point!\n")
                            pts_lost_dict[unit.name] += 1
                    else:
                        if unit.is_polyadic:
                            mutated_value = arg[0]
                        else:
                            mutated_value = arg
                        if unit.test_type(expected_value, mutated_value):
                            test_file.write("  Mutated value correct! +1\n")
                            unit.score += 1
                        else:
                            test_file.write("  Incorrect mutated value! No point!\n")
                            pts_lost_dict[unit.name] += 1

            total_score += unit.score

        self.score = total_score
        test_file.write("\nSummary:")
        if self.score < self.num_tests:
            for name in pts_lost_dict:
                pts_lost = pts_lost_dict[name]
                if pts_lost > 0:
                    test_file.write("\nFunction \"" + name + "\", points lost " + str(pts_lost) + ".")
        else:
            test_file.write(" Perfection!")
        summary = "Final Score: " + str(self.score) + "/" + str(self.num_tests)
        test_file.write("\n\n" + summary)
        print(summary)

# Test Cases (tc)
# Format: a list of tuples where each tuple
# gives an argument (or tuple of arguments)
# and the expected return  (or tuple of acceptable returns)
# for that argument.

arthur = "Strange women lying in ponds, distributing swords, is no basis for a system of government!"

bright_side = '''Cheer up, Brian. You know what they say:
Some things in life are bad.
They can really make you mad.
Other things just make you swear and curse.
When you're chewing on life's gristle,
Don't grumble. Give a whistle.
And this'll help things turn out for the best. And...
Always look on the bright side of life.'''

sir_robin = '''Brave Sir Robin ran away. Bravely ran away away.
When danger reared its ugly head, he bravely turned his tail and fled.
Brave Sir Robin turned about and gallantly he chickened out.'''

lotr = '''Three Rings for the Elven-kings under the sky,
Seven for the Dwarf-lords in their halls of stone,
Nine for Mortal Men doomed to die,
One for the Dark Lord on his dark throne,
In the Land of Mordor where the Shadows lie.
One Ring to rule them all, One Ring to find them,
One Ring to bring them all, and in the darkness bind them,
In the Land of Mordor where the Shadows lie.'''

letter_map = {'a': 'm', 'b': 'k', 'c': 'n', 'd': 'o', 'e': 'c', 'f': 'v', 'g': 'w', 'h': 'z', 'i': 'b', 'j': 't', 'k': 'y', 'l': 'r', 'm': 'x', 'n': 'd', 'o': 'u', 'p': 'p', 'q': 'a', 'r': 'i', 's': 's', 't': 'f', 'u': 'q', 'v': 'e', 'w': 'l', 'x': 'g', 'y': 'j', 'z': 'h'}
letters_nums = 'abcdefghijklmnopqrstuvwxyz1234567890'
R = {17, 20, 21, 27, 33, 34, 38, 47, 50, 51, 53, 56, 57, 58, 67, 68, 74, 76, 79, 80, 89, 96, 97}
S = {2, 3, 4, 6, 7, 8, 11, 12, 15, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 44, 46, 48, 53, 55, 58, 60, 66, 68, 74, 76, 79, 80, 84, 88, 91, 93, 94, 97,
100}
T = {1, 2, 3, 4, 7, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 22, 24, 25, 26, 28, 31, 32, 33, 34, 35, 36, 37, 39, 43, 45, 47, 49, 50, 51, 52, 54, 55, 58, 59, 60, 61,
62, 63, 67, 68, 70, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 86, 87, 88, 89, 90, 93, 94, 97, 99}
D1 = {1:3, 2:5, 3:7, 4:11}
D2 = {3:9, 5:25, 7:49, 11:121}
D3 = {9:27, 25:75, 49:147, 121:363}
D4 = {5:20, 11:44, 44:4}
D5 = {}
L1 = [D1, D2, D3]
L2 = [D1, D4]
L3 = [D4, D1]
L4 = [D1, D5]
L5 = [D5, D5]
letter_count_tc = [(lotr, {'a': 13, 'b': 2, 'c': 0, 'd': 19, 'e': 39, 'f': 9, 'g': 6, 'h': 22, 'i': 18, 'j': 0, 'k': 5, 'l': 15, 'm': 9, 'n': 29, 'o': 29, 'p': 0, 'q': 0, 'r': 27, 's':14, 't': 22, 'u': 2, 'v': 2, 'w': 5, 'x': 0, 'y': 1, 'z': 0}),
                   ('', {'a': 0, 'b': 0, 'c': 0, 'd': 0, 'e': 0, 'f': 0, 'g': 0, 'h': 0, 'i': 0, 'j': 0, 'k': 0, 'l': 0, 'm': 0, 'n': 0, 'o': 0, 'p': 0, 'q': 0, 'r': 0, 's': 0, 't': 0, 'u': 0, 'v': 0, 'w': 0, 'x': 0, 'y': 0, 'z': 0})]
word_count_tc = [(bright_side, {'cheer': 1, 'up': 1, 'brian': 1, 'you': 3, 'know': 1, 'what': 1, 'they': 2, 'say': 1, 'some': 1, 'things': 3, 'in': 1, 'life': 2, 'are': 1, 'bad': 1, 'can': 1, 'really': 1, 'make': 2, 'mad': 1, 'other': 1, 'just': 1, 'swear': 1, 'and': 3, 'curse': 1, 'when': 1, "you're": 1, 'chewing': 1, 'on': 2, "life's": 1, 'gristle': 1, "don't": 1, 'grumble': 1, 'give': 1, 'a': 1, 'whistle': 1, "this'll": 1, 'help': 1, 'turn': 1, 'out': 1, 'for': 1, 'the': 2, 'best': 1, 'always': 1, 'look': 1, 'bright': 1, 'side': 1, 'of': 1}),
                 ('', {})]
to_morse_tc = [('spam and eggs', '... .--. .- -- .- -. -.. . --. --. ...'),
               ('', '')]
subst_cipher_tc = [((letter_map, sir_robin), 'Kimec Sbi Iukbd imd mlmj. Kimecrj imd mlmj mlmj. Lzcd omdwci icmico bfs qwrj zcmo, zc kimecrj fqidco zbs fmbr mdo vrco. Kimec Sbi Iukbd fqidco mkuqf mdo wmrrmdfrj zc nzbnycdco uqf.'),
                   (({}, ''), '')]
decrypt_tc = [(({}, ''), ''),
              ((letter_map, 'lmvci fzbd'), 'wafer thin')]
next_date_tc = [((1, 1, 1), (2, 1, 1)),
                ((31, 1, 1), (1, 2, 1)),
                ((31, 12, 2022), (1, 1, 2023)),
                ((28, 2, 2023), (1, 3, 2023)),
                ((28, 2, 2024), (29, 2, 2024))]
number_name_tc = [(9, 'nine'),
                  (19, 'nineteen'),
                  (99, 'ninety nine'),
                  (999, 'nine hundred ninety nine'),
                  (123999, 'one hundred twenty three thousand nine hundred ninety nine'),
                  (123456999, 'one hundred twenty three million four hundred fifty six thousand nine hundred ninety nine'),
                  (123456789999, 'one hundred twenty three billion four hundred fifty six million seven hundred eighty nine thousand nine hundred ninety nine'),
                  (6190341278453321087663410, 'six septillion one hundred ninety sextillion three hundred forty one quintillion two hundred seventy eight quadrillion four hundred fifty three trillion three hundred twenty one billion eighty seven million six hundred sixty three thousand four hundred ten')]
deviation_tc = [({}, 0),
                ({1:1, 2:2, 3:3}, 1),
                ({1:1, 2:1, 3:1, 4:4, 5:5, 6:4}, 3)]
is_bijective_tc = [({}, True),
                   ({1:1}, True),
                   ({1:2, 2:3, 3:4}, True),
                   ({1:2, 2:2, 3:4}, False)]
reverse_dct_tc = [({}, {}),
                  ({1:2, 2:1}, {1:2, 2:1}),
                  ({1:2, 3:4, 5:6, 7:8}, {2:1, 4:3, 6:5, 8:7})]
dict_comp_tc = [(L1, {1: 27, 2: 75, 3: 147, 4: 363}), (L2, {2: 20, 4: 44}), (L3, {44: 11}), (L4, {}), (L5, {})]
apply_perm_tc = [(('', '()'), ''),
                 (('abc', '()'), 'abc'),
                 (('abc', '(abc)'), 'bca'),
                 (('abcdefg', '(ac)(bef)(gd)'), 'ceagfbd')]
eq_perms_tc = [(('()', '()'), True),
               (('(a)', '()'), True),
               (('(a)', '(b)'),True),
               (('()', '(ab)'), False),
               (('()', '(ab)(ab)'), True),
               (('(ab)', '(ba)'), True),
               (('(abc)', '(acb)'), False),
               (('(abc)(ca)', '(ca)(abc)'), False),
               (('(df)(adg)(gadef)(hc)(cia)', '(dg)(fchiae)'), True)]
inverse_perms_tc = [(('()', '()'), True),
                    (('(a)', '()'), True),
                    (('(ab)', '(ab)'), True),
                    (('(bac)', '(acb)'), False),
                    (('(adfg)(bac)(iec)', '(dabceigf)'), True),
                    (('(dagf)(bac)(iec)', '(idfagbce)'), False)]
cycle_length_tc = [('()', 1),
                   ('(a)', 1),
                   ('(ab)', 2),
                   ('(acbd)', 4),
                   ('(spam)(and)(egs)', 8)]
compress_perm_tc = [('()', '()'),
                    ('(a)', '()'),
                    ('(ab)', '(ab)'),
                    ('(bac)(dagbe)(iacdge)', '(beg)(adci)')]
intersect_tc = [((R, S), {33, 34, 97, 68, 38, 74, 76, 79, 80, 53, 58, 27}),
                ((R, T), {33, 34, 67, 68, 97, 74, 76, 47, 79, 80, 50, 51, 20, 21, 89, 58}),
                ((set(), R), set()),
                ((set(), set()), set())]
union_tc = [((R, S), {2, 3, 4, 6, 7, 8, 11, 12, 15, 17, 20, 21, 22, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 44, 46, 47, 48, 50, 51, 53, 55, 56, 57, 58, 60, 66, 67, 68, 74, 76, 79, 80, 84, 88, 89, 91, 93, 94, 96, 97, 100}),
            ((R, set()), R),
            ((set(), set()), set())]
diff_tc = [((R, S), {89, 96, 67, 47, 17, 50, 51, 20, 21, 56, 57}),
           ((S, R), {2, 3, 4, 6, 7, 8, 11, 12, 15, 22, 29, 30, 31, 32, 35, 36, 37, 40, 44, 46, 48, 55, 60, 66, 84, 88, 91, 93, 94, 100}),
           ((R, set()), R),
           ((set(), R), set()),
           ((set(), set()), set())]
is_subset_tc = [(({1, 2}, {1, 2, 3}), True),
                (({1, 2, 3}, {1, 2, 3}), True),
                (({1, 2, 4}, {1, 2, 3}), False),
                ((set(), {1, 2, 3}), True),
                ((set(), set()), True)]
proper_subset_tc = [(({1, 2}, {1, 2, 3}), True),
                    (({1, 2, 3}, {1, 2, 3}), False),
                    (({1, 2, 4}, {1, 2, 3}), False),
                    ((set(), {1, 2, 3}), True),
                    ((set(), set()), False)]
power_set_tc = [({'!', '@', '#', '$', '%'}, [set(), {'@'}, {'$'}, {'@', '$'}, {'%'}, {'%', '@'}, {'%', '$'}, {'%', '@', '$'}, {'#'}, {'#', '@'}, {'#', '$'}, {'#', '@', '$'}, {'#', '%'}, {'%', '#', '@'}, {'#', '%', '$'}, {'%', '#', '@', '$'}, {'!'}, {'@', '!'}, {'!', '$'}, {'@', '!', '$'}, {'%', '!'}, {'%', '@', '!'}, {'%', '!', '$'}, {'%', '@', '!', '$'}, {'#', '!'}, {'#', '@', '!'}, {'#', '!', '$'}, {'#', '@', '!', '$'}, {'#', '%', '!'}, {'%', '#', '@', '!'}, {'#', '%', '!', '$'}, {'@', '$', '%', '#', '!'}]),
                ({1, 2, 3}, [set(), {1}, {2}, {1, 2}, {3}, {1, 3}, {2, 3}, {1, 2, 3}]),
                ({}, [set()])]

# Create Units
# This block will cause a crash if you haven't created all of the required functions.
# Format: Unit(func, name, cases, is_polyadic, is_mutator, test_type)
# Test types: eq_comp, is_comp, eq_not_is, elems_comp
letter_count_unit = Unit(letter_count, 'letter_count', letter_count_tc, False, False, eq_comp)
word_count_unit = Unit(word_count, 'word_count', word_count_tc, False, False, eq_comp)
to_morse_unit = Unit(to_morse, 'to_morse', to_morse_tc, False, False, eq_comp)
subst_cipher_unit = Unit(subst_cipher, 'subst_cipher', subst_cipher_tc, True, False, eq_comp)
decrypt_unit = Unit(decrypt, 'decrypt', decrypt_tc, True, False, eq_comp)
next_date_unit = Unit(next_date, 'next date', next_date_tc, True, False, eq_comp)
number_name_unit = Unit(number_name, 'number_name', number_name_tc, False, False, eq_comp, extra_credit=True)
deviation_unit = Unit(deviation, 'deviation', deviation_tc, False, False, eq_comp)
is_bijective_unit = Unit(is_bijective, 'is_bijective', is_bijective_tc, False, False, eq_comp)
reverse_dct_unit = Unit(reverse_dct, 'reverse_dct', reverse_dct_tc, False, False, eq_comp)
dict_comp_unit = Unit(dict_comp, "dict_comp", dict_comp_tc, False, False, eq_comp)
apply_perms_unit = Unit(apply_perm, 'apply permutation', apply_perm_tc, True, False, eq_comp)
eq_perms_unit = Unit(eq_perms, 'equivalent permutations', eq_perms_tc, True, False, eq_comp)
inverse_perms_unit = Unit(inverse_perms, "inverse permutations", inverse_perms_tc, True, False, eq_comp)
cycle_length_unit = Unit(cycle_length, "cycle length", cycle_length_tc, False, False, eq_comp)
compress_perm_unit = Unit(compress_perm, "compress permutation", compress_perm_tc, False, False, perm_eq, extra_credit=True)
intersect_unit = Unit(intersect, 'intersect', intersect_tc, True, False, eq_comp)
union_unit = Unit(union, 'union', union_tc, True, False, eq_comp)
diff_unit = Unit(diff, 'difference', diff_tc, True, False, eq_comp)
is_subset_unit = Unit(is_subset, 'is_subset', is_subset_tc, True, False, eq_comp)
proper_subset_unit = Unit(proper_subset, 'proper_subset', proper_subset_tc, True, False, eq_comp)
power_set_unit = Unit(power_set, 'power_set', power_set_tc, False, False, elems_comp)

# Unit Test List
units = [letter_count_unit, word_count_unit, to_morse_unit, subst_cipher_unit, decrypt_unit, next_date_unit,
         number_name_unit, deviation_unit, is_bijective_unit, reverse_dct_unit, dict_comp_unit, apply_perms_unit,
         eq_perms_unit, inverse_perms_unit, cycle_length_unit, compress_perm_unit, intersect_unit, union_unit,
         diff_unit, is_subset_unit, proper_subset_unit, power_set_unit]

# Create Unit Test
unit_test = UnitTest("Dictionaries and Sets Unit Test", units)

# Test!
unit_test.run_test()
